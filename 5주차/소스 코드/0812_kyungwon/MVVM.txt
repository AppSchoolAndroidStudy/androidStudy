// File을 어떻게 나눌 것인가?
// 개발자들이 만든 표준 방법으로 개발 패턴을 만들었음
// 강제는 아니지만, 지켰을 때, 분석과 관리가 쉽고, 서로 간의 작업 관리가 용이해짐.

// MVC 패턴에서 여러 패턴으로 발전함.
// 패턴을 적용해서 만들 때 제공해주는 대로 패턴을 설정하면, 동작을 개발 분야에서 지원해줌
// 정해놓은 방식으로 세팅하면 개발 패턴대로 동작 시킬 수 있음

// 안드로이드 -> 최종적으로 MVVM 디자인 패턴 사용 가능
// [View]       액티비티, 프래그먼트 : 눈에 보이는 화면을 관리하는 것들
// [Model]      데이터 클래스, Res폴더의 정의하는 데이터들 : 데이터를 관리하기 위해 사용하는 것들
// [Controller] 눈에 보이는 것 들이나 코드의 흐름을 변경하는 것들
// [ViewModel]  View와 Model의 일정 역할을 띄어가서 만든 것들

// DataClass의 변수명들은 어디서도 구현되지 데않음.
// 저장되어진 비밀번호, 아이디, 인덱스는 외부로 노출시키지 않음
// 모델 : 눈에 보이는 것들 + 눈에 보이지 않는 것들
// 이 두개를 나눠서 따로 관리 ㄱㄱ? -> 파일을 새로 만들어서 작업을 다 나눠야 함.
// 작업, 파일 양이 늘어나는 것을 감수해도 개발자에게 이점이 있어야지 써먹음
// 개발 패턴을 통해서 다 나누는 목적 : 단순히 나누는게 아니라, 역할을 나누어서 관리하는 것이 가능해짐.
// ex)  액션 영화 한편에서 나오는 사람이 몇명일까? -> 겁나게 많음
//      키아누 리브스가 그 역할을 모두 수행한다? 말도 안됨
//      배우들이 많고 각 배우들에게 역할이 존재함.
//      역할마다 배우들이 다 다르기 때문에 각각의 사람들이 자기의 역할을 동시에 수행할 수 있음
//      어떤 배우는 역할이 맞지 않고, 어떤 배우는 역할이 잘 어울림
//      차은우가 연기를 못하면 연기를 가르치면 되는 거임. 개잘생겼으니까
//      어떻게든지 차은우를 데리고 끝까지 가야 됨.
// MVVM 패턴을 안써도 불편하지 않음. 아무 문제는 없음. 자동완성이 되니까
// 수정하고 싶은 부분도 검색을 활용하면 하나도 어렵지 않음
// 각 역할별로 파일을 나누고, 중복화를 최소화 -> 개발 패턴의 궁극적인 목적
// 개발할 당시에는 구조적으로 만들기 때문에 관리가 용이함.
// 단점 : 개발패턴에 자세히 알지 못하면 짜지도 못하고, 분석하지도 못함.
// 그 단점만 극복하면 개발하기 매우 편함, 유지보수가 용이하고, 여러 사람들이 협업하기도 편함.